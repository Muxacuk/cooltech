/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$map-pin-name: 'map_pin';
$map-pin-x: 0px;
$map-pin-y: 0px;
$map-pin-offset-x: 0px;
$map-pin-offset-y: 0px;
$map-pin-width: 12px;
$map-pin-height: 15px;
$map-pin-total-width: 44px;
$map-pin-total-height: 15px;
$map-pin-image: '../pictures/spritecontacts.png';
$map-pin: (0px, 0px, 0px, 0px, 12px, 15px, 44px, 16px, '../pictures/spritecontacts.png', 'map_pin', );
$telephone-name: 'telephone';
$telephone-x: 32px;
$telephone-y: 0px;
$telephone-offset-x: -32px;
$telephone-offset-y: 0px;
$telephone-width: 12px;
$telephone-height: 15px;
$telephone-total-width: 44px;
$telephone-total-height: 15px;
$telephone-image: '../pictures/spritecontacts.png';
$telephone: (32px, 0px, -32px, 0px, 12px, 15px, 44px, 16px, '../pictures/spritecontacts.png', 'telephone', );
$spritesheet-width: 44px;
$spritesheet-height: 16px;
$spritesheet-image: '../pictures/spritecontacts.png';
$spritesheet-sprites: ($map-pin, $telephone, );
$spritesheet: (44px, 16px, '../pictures/spritecontacts.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
